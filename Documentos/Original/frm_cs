unit bst_Unit;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Menus, ComCtrls,Provider,DBClient,
  ADODb,dbTables,math,strUtils,DB,best_dm;

 type
  uEmp = ^Temp;
  TEmp = record
     Fcli: integer;
  end;
                            
  type
  uCen = ^TCen;
  TCen = record
     Fcli: integer;
     fCenario : integer;
  end;

  type
  uDiag = ^TDiag;
  TDiag = record
     Fcli       : integer;
     fCenario   : integer;
     fDiag      : integer;
  end;


  type
  uObj = ^TObj;
  TObj = record
     Fcodigo     : string;
     fDesc       : string;
  end;



TDados= Class(TADOQuery)   // modificar para Tquery para não usar ADO
  Private
     fdatasource : TdataSource;
     fChave     : string;
     fCpoLista1 : string;
     fCpoLista2 : string;
     FSQL: Tstrings;
     Db : Tdatabase;

     procedure SetdataSource ( value : TdataSource);
     procedure AftrPost (dataSet : TdataSet);
     procedure PostErr(DataSet: TDataSet; E: EDatabaseError;var Action: TDataAction);
     procedure OnErrorRec(DataSet: TCustomClientDataSet; E: EReconcileError;
      UpdateKind: TUpdateKind; var Action: TReconcileAction);
  published

   property DataExt: TdataSource read fdataSource write SetDataSource;

   public
    Status     : char;
    fprovider : TDatasetProvider;
    fClient : TClientDataset;
    constructor Create (Aowner : TComponent);
    procedure Cria_lista (pLista: TTreeView;pMostraKey,pLimpa : boolean );
end;
{INICIO CLASSES}

{FIM CLASSES}

resourcestring

  Mens1       = 'Confirma a Eliminação ?';

var
 mObj : uObj;
 GenCount : Integer;


implementation


{INICIO METODOS}

constructor Tdados.Create;
 begin
 inherited create(application);
   connection     := dm_best.ADOC;  //para ADO
   DataExt          := TdataSource.create(self);
   DataExt.Name     := 'DS'+inttostr(GenCount);
   dataext.DataSet  := self;
 end;

procedure TDados.PostErr(DataSet: TDataSet; E: EDatabaseError;
  var Action: TDataAction);
begin
  dataset.cancel;
  showmessage('Erro de Gravação(post)');
end;

procedure Tdados.OnErrorRec(DataSet: TCustomClientDataSet;
  E: EReconcileError; UpdateKind: TUpdateKind;
  var Action: TReconcileAction);
begin
 //  If UpdateKind = ukDelete then
     begin
      showmessage(e.Message);
      action := racancel;
     end;

end;

procedure Tdados.AftrPost(DataSet: TDataSet);
begin
  fClient.ApplyUpdates(0);
end;

procedure Tdados.Cria_lista (pLista: TTreeView;pMostraKey,pLimpa : boolean );
var
i : integer;
 begin
   If pLimpa then
     pLista.Items.clear;

    with Self do
     begin
      while not eof do
       begin
         new(mObj);
         mObj^.Fcodigo := fieldbyname(fcpoLista1).asstring ;
         mObj^.fDesc   := fieldbyname(fcpoLista2).asstring ;
         If pMostraKey then
            pLista.Items.AddObject(nil,mObj^.Fcodigo+'-'+mObj^.fDesc,mObj)
         else
            pLista.Items.AddObject(nil,mObj^.fDesc,mObj) ;
        // pLista.repaint;

       next;
       end;
      pLista.SortType := stText;
      pLista.AlphaSort(true);
     end;
 end;

{FIM METODOS}

{INICIO SET VALUES}

procedure Tdados.SetdataSource ( value : TdataSource);
 begin
    fdataSource  := value;
 end;
 
{FIM SET VALUES}

end.
