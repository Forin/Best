unit fonctions;

interface

uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,QRCtrls,dbgrids,pList_std,strUtils,shellApi, gtQrCtrls;
   {converte de yy/mm/dd -> dd/mm/yy  (DATA)}
  function Dataddmmyy(pdata : string) : real;
  function Invertedata1(pdata : string) : string;
  function IsDate(pdata : string) : string ;
  function ListPrt(pDbgrid : TDbGRid;pCab : string) : boolean;
  function Invertedata(pdata : string) : string;//converte de ýyyy/mm/dd -> dd/mm/yyyy
  { pesquisa um valor numa lista e retorna true se achou; a lista pode ser TstringList,TListBox}
  function InList (pValor : string;pList : Tobject) : boolean;
   { verifcia se pvaloe esta na tabela pArray}
  function InArray (pValor : string;pArray : array of string) : boolean;
  { retorna string contido em pLInha a esquerda de pChar}
  function Parse_Left (pLinha,pChar : string) : string;
  { retorna string contido em pLInha a direita de pChar}
  function Parse_Right (pLinha,pChar : string) : string;
  { retorna string contido em pLInha entree pChar1 e pChar2}
  function Parse_Mid (pLinha,pChar1,pChar2 : string) : string;
  function FormataCampo(pCpo :string ;pTipo : string;
                pTamanho : integer;pPos :string) : string;
                { pCpo = campo a formatar
                  pTipo ; Z : COMPLEETAR COM ZEROS
                          B : Completar com brancos.
                  pTamanho : tamanho final do campo
                  pPos     : L : preenchimento a esquerd
                             R : preenchimento a direita}

    {executa um programa windows }
   procedure ExecProg (Nome,param : string);
implementation

function InList (pValor : string;pList : Tobject) : boolean;
var
 i : integer;
 begin
  result := false;
  If pList is TStringList then
   begin
     for i := 0 to (pList as TstringList).Count - 1 do
      begin
        If pValor = (pList as TstringList)[i] then
         begin
           result := true  ;
           break;
         end;

      end;
   end;
 end;

function InArray (pValor : string;pArray : array of string) : boolean;
var
 i : integer;
 begin
  result := false;

   begin
     for i := 0 to length(pArray) - 1 do
      begin
        If pValor = pArray[i] then
         begin
           result := true  ;
           break;
         end;

      end;
   end;
 end;

function IsDate(pdata : string) : string ; //Verifica se data correta e
                                               // retorna data formato yyyy/mm/dd
var
wano,wmes,wdia,wdat,dat_atu : string;
wdaTA :real;
Wpos : integer;
Begin
  try
   begin
     result := '';
     dat_atu := trim(pdata);
     If length(dat_atu) = 8 then     //formato dd/mm/yy
       Begin
         wano := copy(pdata,7,2);
         Wmes := copy(pdata,4,2);
         Wdia := copy(pData,1,2);
         Wdat := wdia+'/'+wmes+'/'+wano;
       end
     else
     If length(dat_atu) = 10 then
       Begin
         If pos('/',dat_atu) = 5 then    //formato yyyy/mm/dd
           Begin
             wano := copy(pdata,3,2);
             Wmes := copy(pdata,6,2);
             Wdia := copy(pData,9,2);
             Wdat := wdia+'/'+wmes+'/'+wano;
           end
         else
           Begin
             wano := copy(pdata,9,2);   //formato dd/mm/yyyy
             Wmes := copy(pdata,4,2);
             Wdia := copy(pData,1,2);
             Wdat := wdia+'/'+wmes+'/'+wano;
           end
       end;
       result := '20'+wano+'/'+wmes+'/'+wdia;
       Wdata := strtodate(Wdat);

   end;
  except
   begin
      result := '';
   end;
  end;

end;

function FormataCampo(pCpo :string ;pTipo : string;
                pTamanho : integer;pPos :string) : string;
                { pCpo = campo a formatar
                  pTipo ; Z : COMPLEETAR COM ZEROS
                          B : Completar com brancos.
                  pTamanho : tamanho final do campo
                  pPos     : L : preenchimento a esquerd
                             R : preenchimento a direita}
var

tam,dif : integer;
Wcpo ,bl,zr : string;
begin
 bl := '             ';
 zr := '0000000000000';
 wcpo := trim(pCpo);
 tam := length(Wcpo);
// Wcpo := copy(Wcpo,1,Tam);
If tam = ptamanho then
   begin
    result := Wcpo;
    exit;
   end;
 If tam < pTamanho then
    Dif := pTamanho - tam
 else
    begin
      result :=  copy(Wcpo,1,pTamanho);
      exit;

    end;
    
 If uppercase(ptipo) = 'Z' then
    begin
      If uppercase(pPOs) = 'L' then
         result := copy(zr,1,dif ) + Wcpo
      else
         result := Wcpo + copy(zr,1,dif );
    end
 else
    begin
      If uppercase(pPOs) = 'L' then
         result := copy(bl,1,dif ) + Wcpo
      else
         result := Wcpo + copy(bl,1,dif );
    end

end;

function JultoNormal(pJul : real) : string;//converte Juliano p/ AAAAMM
var
Wano,wmes : string;
Wyear,wresto : real;
WrYear : real;
Begin
  wmes := '';
  Wano := '';
  Wyear := (23760 + pJul) / 12 ;
  WRyear := trunc(Wyear)  ;
  If wyear = Wryear then
     Begin
        Wano := floattostr(Wyear-1);
        Wmes := '12';
     end
  else
     Begin
       Wano := floattostr(WRyear);

       wRESTO := (23760 + pJul)  - (Wryear * 12) ;
       Wmes := floattostr(Wresto);
       If length(Trim(wmes)) = 1 then
          wmes := '0'+wmes;
     end;
  result := Wano+'/'+wmes;
end;

function NormaltoJul(pNormal : string) : string;//converte Juliano p/ AAAAMM
var
Wano,wmes : string;
Wyear,wresto : real;
WrYear : real;
Begin
  wmes := copy(pNormal,5,2);
  Wano := copy(pNormal,1,4);
  Wyear := ((strtofloat(Wano) *12) + strtofloat(Wmes)) - 23760;
  result :=floattostr(Wyear);
end;

function Dataddmmyy(pdata : string) : real;//converte de yy/mm/dd -> dd/mm/yy
Begin
  result := strtodate(copy(pdata,9,2)+'/'+copy(pdata,6,2)+'/'+copy(pData,3,2));

end;

function Invertedata(pdata : string) : string;//converte de ýyyy/mm/dd -> dd/mm/yyyy
Begin
  If pos('/',pdata)  = 3 then
    result := pdata
  else
    result := copy(pdata,9,2)+'/'+copy(pdata,6,2)+'/'+copy(pData,1,4);

end;

function Invertedata1(pdata : string) : string;//converte de dd/mm/yy -> yyyy/mm/dd
Begin
   result := formatdatetime('yyyy/mm/dd',strtodate(pData));

end;


function ListPrt(pDbgrid : TDbGRid;pCab : string) : boolean;
var
wForm : Tfrm_pList;
i,wleft : integer;
begin
  wForm := Tfrm_pList.create(application);
  Wleft := 0;
  with wForm do
   begin
    wform.pTit.caption := pCab;
    If pDbgrid.Parent is Tform  then
       WForm.pTit1.Caption := (pDbgrid.Parent as Tform).caption;
     with pDbGrid do
      begin
       qrp.DataSet := pDbgrid.DataSource.DataSet;
       with wform do
        begin

          for i := 0 to pdbgrid.Columns.Count - 1 do
          begin
              with TgtQRLabel.create(wForm) do
                 Begin
                   If i > 0 then
                      begin
                        Wleft := Wleft +pdbgrid.Columns[i-1].width + 15  ;
                        left := WLeft;
                      end
                   else
                     left := 1;
                   width := pdbgrid.Columns[i].Width ;
                   top    := 0;
                   WordWrap := true;
                   parent := ch;
                   font.style := [fsBold];
                   caption := pdbgrid.Columns[i].Title.Caption;
                  end;
              with TgtQRDBText.create(wForm) do
                 Begin
                    Autosize := false;
                   left := Wleft ;
                   WordWrap := true;
                   height := 35;
                   width := pdbgrid.Columns[i].width + 15;
                   top    := 0;
                   parent := db;
                   dataset := pDbgrid.datasource.dataset;
                   datafield := pDbgrid.Columns[i].FieldName;
                  end;
          end;

        end;
      end;
   qrp.Preview;
   close;
   end;

end;

function Parse_Left (pLinha,pChar : string) : string;
 begin
  result := LeftStr(pLinha,pos(pchar,pLinha)-1);

 end;

function Parse_Right (pLinha,pChar : string) : string;
var
l : integer;
 begin
  l := length(trim(pLinha));
  result := RightStr(pLinha,l -pos(pchar,pLinha)-1);

 end;

function Parse_Mid (pLinha,pChar1,pChar2 : string) : string;
var
 p1,p2,l : integer;
 begin
   p1 := pos(pchar1,pLinha);
   p2 := pos(pchar2,pLinha);
   L := abs((p2-p1)-1);

   result :=  copy(pLinha,p1+1,l);
 end;

procedure ExecProg (Nome,param : string);
var
comm : array [0..1024] of char;
parm:  array [0..1024] of char;
  begin
    strPcopy(Comm,nome);
    strPcopy(parm,param);
    shellExecute(0,nil,Comm,parm,nil,SW_SHOW);
  end;


end.
