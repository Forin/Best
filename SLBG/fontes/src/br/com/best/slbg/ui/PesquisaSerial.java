/*
 * PesquisaSerial.java
 *
 * Created on 18/10/2009, 14:16:08
 */
package br.com.best.slbg.ui;

import br.com.best.slbg.bo.ClienteBO;
import br.com.best.slbg.bean.Cliente;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author marcelo
 */
public class PesquisaSerial extends javax.swing.JInternalFrame {

    private Vector<Cliente> consultaGeralClientes;

    /** Creates new form PesquisaSerial */
    public PesquisaSerial() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlNomeCliente = new javax.swing.JLabel();
        jtfNomeCliente = new javax.swing.JTextField();
        jbExecuta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsulta = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consulta de Clientes/Serial");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlNomeCliente.setText("Razao Social do Cliente:");

        jtfNomeCliente.setColumns(50);

        jbExecuta.setText("Executa");
        jbExecuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExecutaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlNomeCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbExecuta)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNomeCliente)
                    .addComponent(jtfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExecuta))
                .addContainerGap())
        );

        jtConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Núm. Contrato", "Data Compra", "E-Mail", "Nome do Contato", "Razão Social", "Telefone Contato"
            }
        ));
        jtConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtConsulta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        populaGrid(1);
    }//GEN-LAST:event_formInternalFrameOpened

    private void jbExecutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExecutaActionPerformed
        populaGrid(2);
    }//GEN-LAST:event_jbExecutaActionPerformed

    private void jtConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtConsultaMouseClicked
        ClienteCad.jtfCodigo.setText(jtConsulta.getValueAt(jtConsulta.getSelectedRow(), 0).toString());
        this.dispose();
    }//GEN-LAST:event_jtConsultaMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbExecuta;
    private javax.swing.JLabel jlNomeCliente;
    private javax.swing.JTable jtConsulta;
    private javax.swing.JTextField jtfNomeCliente;
    // End of variables declaration//GEN-END:variables

    /**
     * populaGrid
     *
     * Esse método é responsável por efetuar a carga da Grid para o usuário
     * O parâmetro 'tipo', define '1' para efetuar a carga de todos os
     * elementos do banco e '2' para efetuar a carga usando 'LIKE' da razão
     * social do cliente
     *
     * @param tipo
     */
    private void populaGrid(int tipo) {
        // Cria os objetos que definirão os Titulos das colunas e as
        // linhas das mesmas
        Vector<String> titulos = new Vector<String>();
        Vector<Object> linhas = new Vector<Object>();
        // Define a mascara de apresentação da Data
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        //Relação de Titulos das colunas
        titulos.add("Núm. Contrato");
        titulos.add("Data Compra");
        titulos.add("E-Mail");
        titulos.add("Nome do Contato");
        titulos.add("Razão Social");
        titulos.add("Telefone Contato");

        // Instacia o Objeto de negócios
        ClienteBO clienteBO = new ClienteBO();

        // Efetua a chamada do método, dependendo do parâmetro recebido
        if (tipo == 1) {
            consultaGeralClientes =
                    clienteBO.consultaGeralClientes();
        } else {
            consultaGeralClientes =
                    clienteBO.consultaClientesNomeProximo(jtfNomeCliente.getText().toUpperCase());
        }

        // Efetua a carga das informações que serão apresentadas na Grid
        for (Cliente cliente : consultaGeralClientes) {
            Vector<Object> colunas = new Vector<Object>();
            colunas.add(cliente.getNumeroContrato());
            colunas.add(sdf.format(cliente.getDataVenda()));
            colunas.add(cliente.getEmail());
            colunas.add(cliente.getNomeContato());
            colunas.add(cliente.getRazaoSocial());
            colunas.add(cliente.getFone());

            linhas.add(colunas);
        }

        // Efetua o carregamento da jTable
        jtConsulta.setModel(new DefaultTableModel(linhas, titulos));
    }
}
